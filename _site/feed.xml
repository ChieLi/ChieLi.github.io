<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chie Blog</title>
    <description>这里是 @Chie 的个人博客，记录代码学习过程。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 21 Mar 2018 22:37:02 +0800</pubDate>
    <lastBuildDate>Wed, 21 Mar 2018 22:37:02 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Redis学习 - Redis Tutorial</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/in-post/redis-tutorial/try-redis.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;算是写了两年的iOS，最近很任性地转去了服务器，从零开始。问了问leader需要学些什么，里面就包含Redis，于是就有了这篇拖延了两年的第一篇博文。&lt;/p&gt;

&lt;p&gt;虽然此时的我对Redis一无所知，但是还是要鼓起勇气写下来，也算是给自己开个头，希望今后能够定期更新吧。&lt;/p&gt;

&lt;h1 id=&quot;redis-tutorial&quot;&gt;Redis Tutorial&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;支持的数据类型包括strings，hashes（类似于obeject），lists（有序列），sets（无序集合），sorted sets（有序集合）。&lt;/p&gt;

&lt;h2 id=&quot;operations&quot;&gt;operations&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SET&lt;/strong&gt; [key] [value]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SETNX&lt;/strong&gt; [key] [value] =&amp;gt; set-if-not-exists&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; [key]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DEL&lt;/strong&gt; [key]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;INCR&lt;/strong&gt; [key] =&amp;gt; automatically increment a number stored at key, is an atomic operation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;EXPIRE&lt;/strong&gt; [key] [seconds] =&amp;gt; set a key should only exist for a certain length of time&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TTL&lt;/strong&gt; [key] =&amp;gt; check how long will a key exist, return -2 for not exist and return -1 for never expire&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-operations&quot;&gt;list operations&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RPUSH&lt;/strong&gt; [key] [value] =&amp;gt; push the value at the end of the list if the key doesn’t exist as a different type&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LPUSH&lt;/strong&gt; [key] [value] =&amp;gt; push the value at the start of the list&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LRANGE&lt;/strong&gt; [key] [index] [index] =&amp;gt; give a subset of the list, a value of -1 for the second parameter means to retrieve elements until the end of the list.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LLEN&lt;/strong&gt; [key] =&amp;gt; return the current length of the list&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RPOP&lt;/strong&gt; [key] =&amp;gt; remove the last element from the list and return it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;set-operation&quot;&gt;set operation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SADD&lt;/strong&gt; [key] [value]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SREM&lt;/strong&gt; [key] [value]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SISMEMBER&lt;/strong&gt; [key] [value] =&amp;gt; test the given value is in the set.return 1 if the value is there and 0 if it is not&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SMEMBERS&lt;/strong&gt; [key] =&amp;gt; return a list of all the members in set&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SUION&lt;/strong&gt; [key1] [key2] .. =&amp;gt; combine two or more set and return a list of all the mumbers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sorted-set-operation&quot;&gt;sorted set operation&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;A sorted set is similar to a regular set, but now each value has an associated score. This score is used to sort the elements in the set.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ZADD&lt;/strong&gt; [key] [score] [value]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ZRANGE&lt;/strong&gt; [key] [index1] [index2]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hashes-operation&quot;&gt;hashes operation&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hashes are maps between string fields and string values, so they are the perfect data type to represent objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;HSET&lt;/strong&gt; [key] [field] [value]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HMSET&lt;/strong&gt; [key] [field1] [value1] [field1] [value2] .. =&amp;gt; set multiple fields at once&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HGETALL&lt;/strong&gt; [key]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HGET&lt;/strong&gt; [key] [field]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HINCRBY&lt;/strong&gt; [key] [field] [count] =&amp;gt; atomically increment hash field, exatly the same as in simple strings&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HDEL&lt;/strong&gt; [key] [field]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more&quot;&gt;more&lt;/h2&gt;

&lt;p&gt;Tutorial的最后是下面的四个链接可以更深入地学习&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://redis.io/documentation&quot;&gt;Redis Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://redis.io/commands&quot;&gt;Command Reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://redis.io/topics/twitter-clone&quot;&gt;Implement a Twitter Clone in Redis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://redis.io/topics/data-types-intro&quot;&gt;Introduction to Redis Data Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 21 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/21/redis-tutorial/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/21/redis-tutorial/</guid>
        
        <category>服务器开发</category>
        
        <category>数据库</category>
        
        <category>Redis</category>
        
        
      </item>
    
  </channel>
</rss>
